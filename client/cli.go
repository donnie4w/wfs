// Code generated by Thrift Compiler (0.17.0). DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal

// 返回对象
// 
// Attributes:
//  - Status: 状态
//  - Desc
type WfsAck struct {
  Status *int32 `thrift:"status,1" db:"status" json:"status,omitempty"`
  Desc *string `thrift:"desc,2" db:"desc" json:"desc,omitempty"`
}

func NewWfsAck() *WfsAck {
  return &WfsAck{}
}

var WfsAck_Status_DEFAULT int32
func (p *WfsAck) GetStatus() int32 {
  if !p.IsSetStatus() {
    return WfsAck_Status_DEFAULT
  }
return *p.Status
}
var WfsAck_Desc_DEFAULT string
func (p *WfsAck) GetDesc() string {
  if !p.IsSetDesc() {
    return WfsAck_Desc_DEFAULT
  }
return *p.Desc
}
func (p *WfsAck) IsSetStatus() bool {
  return p.Status != nil
}

func (p *WfsAck) IsSetDesc() bool {
  return p.Desc != nil
}

func (p *WfsAck) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WfsAck)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Status = &v
}
  return nil
}

func (p *WfsAck)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Desc = &v
}
  return nil
}

func (p *WfsAck) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WfsAck"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WfsAck) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStatus() {
    if err := oprot.WriteFieldBegin(ctx, "status", thrift.I32, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:status: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Status)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.status (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:status: ", p), err) }
  }
  return err
}

func (p *WfsAck) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDesc() {
    if err := oprot.WriteFieldBegin(ctx, "desc", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:desc: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Desc)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.desc (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:desc: ", p), err) }
  }
  return err
}

func (p *WfsAck) Equals(other *WfsAck) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Status != other.Status {
    if p.Status == nil || other.Status == nil {
      return false
    }
    if (*p.Status) != (*other.Status) { return false }
  }
  if p.Desc != other.Desc {
    if p.Desc == nil || other.Desc == nil {
      return false
    }
    if (*p.Desc) != (*other.Desc) { return false }
  }
  return true
}

func (p *WfsAck) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WfsAck(%+v)", *p)
}

// 文件对象
// 
// Attributes:
//  - Name: 名称
//  - FileBody: 对象
//  - FileType: 类型
type WfsFile struct {
  Name *string `thrift:"name,1" db:"name" json:"name,omitempty"`
  FileBody []byte `thrift:"fileBody,2" db:"fileBody" json:"fileBody,omitempty"`
  FileType *string `thrift:"fileType,3" db:"fileType" json:"fileType,omitempty"`
}

func NewWfsFile() *WfsFile {
  return &WfsFile{}
}

var WfsFile_Name_DEFAULT string
func (p *WfsFile) GetName() string {
  if !p.IsSetName() {
    return WfsFile_Name_DEFAULT
  }
return *p.Name
}
var WfsFile_FileBody_DEFAULT []byte

func (p *WfsFile) GetFileBody() []byte {
  return p.FileBody
}
var WfsFile_FileType_DEFAULT string
func (p *WfsFile) GetFileType() string {
  if !p.IsSetFileType() {
    return WfsFile_FileType_DEFAULT
  }
return *p.FileType
}
func (p *WfsFile) IsSetName() bool {
  return p.Name != nil
}

func (p *WfsFile) IsSetFileBody() bool {
  return p.FileBody != nil
}

func (p *WfsFile) IsSetFileType() bool {
  return p.FileType != nil
}

func (p *WfsFile) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WfsFile)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *WfsFile)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.FileBody = v
}
  return nil
}

func (p *WfsFile)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FileType = &v
}
  return nil
}

func (p *WfsFile) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WfsFile"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WfsFile) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  }
  return err
}

func (p *WfsFile) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFileBody() {
    if err := oprot.WriteFieldBegin(ctx, "fileBody", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:fileBody: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.FileBody); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.fileBody (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:fileBody: ", p), err) }
  }
  return err
}

func (p *WfsFile) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFileType() {
    if err := oprot.WriteFieldBegin(ctx, "fileType", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fileType: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.FileType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.fileType (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fileType: ", p), err) }
  }
  return err
}

func (p *WfsFile) Equals(other *WfsFile) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Name != other.Name {
    if p.Name == nil || other.Name == nil {
      return false
    }
    if (*p.Name) != (*other.Name) { return false }
  }
  if bytes.Compare(p.FileBody, other.FileBody) != 0 { return false }
  if p.FileType != other.FileType {
    if p.FileType == nil || other.FileType == nil {
      return false
    }
    if (*p.FileType) != (*other.FileType) { return false }
  }
  return true
}

func (p *WfsFile) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WfsFile(%+v)", *p)
}

// 命令
// 
// Attributes:
//  - CmdKey: 名称
//  - CmdValue: 对象
type WfsCmd struct {
  CmdKey *string `thrift:"cmdKey,1" db:"cmdKey" json:"cmdKey,omitempty"`
  CmdValue *string `thrift:"cmdValue,2" db:"cmdValue" json:"cmdValue,omitempty"`
}

func NewWfsCmd() *WfsCmd {
  return &WfsCmd{}
}

var WfsCmd_CmdKey_DEFAULT string
func (p *WfsCmd) GetCmdKey() string {
  if !p.IsSetCmdKey() {
    return WfsCmd_CmdKey_DEFAULT
  }
return *p.CmdKey
}
var WfsCmd_CmdValue_DEFAULT string
func (p *WfsCmd) GetCmdValue() string {
  if !p.IsSetCmdValue() {
    return WfsCmd_CmdValue_DEFAULT
  }
return *p.CmdValue
}
func (p *WfsCmd) IsSetCmdKey() bool {
  return p.CmdKey != nil
}

func (p *WfsCmd) IsSetCmdValue() bool {
  return p.CmdValue != nil
}

func (p *WfsCmd) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *WfsCmd)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.CmdKey = &v
}
  return nil
}

func (p *WfsCmd)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.CmdValue = &v
}
  return nil
}

func (p *WfsCmd) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "WfsCmd"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *WfsCmd) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCmdKey() {
    if err := oprot.WriteFieldBegin(ctx, "cmdKey", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:cmdKey: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.CmdKey)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cmdKey (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:cmdKey: ", p), err) }
  }
  return err
}

func (p *WfsCmd) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCmdValue() {
    if err := oprot.WriteFieldBegin(ctx, "cmdValue", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:cmdValue: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.CmdValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.cmdValue (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:cmdValue: ", p), err) }
  }
  return err
}

func (p *WfsCmd) Equals(other *WfsCmd) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.CmdKey != other.CmdKey {
    if p.CmdKey == nil || other.CmdKey == nil {
      return false
    }
    if (*p.CmdKey) != (*other.CmdKey) { return false }
  }
  if p.CmdValue != other.CmdValue {
    if p.CmdValue == nil || other.CmdValue == nil {
      return false
    }
    if (*p.CmdValue) != (*other.CmdValue) { return false }
  }
  return true
}

func (p *WfsCmd) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("WfsCmd(%+v)", *p)
}

type IWfs interface {
  // 上传
  // 
  // Parameters:
  //  - Wf
  WfsPost(ctx context.Context, wf *WfsFile) (_r *WfsAck, _err error)
  // 拉取
  // 
  // Parameters:
  //  - Name
  WfsRead(ctx context.Context, name string) (_r *WfsFile, _err error)
  // 删除
  // 
  // Parameters:
  //  - Name
  WfsDel(ctx context.Context, name string) (_r *WfsAck, _err error)
  // 命令
  // 
  // Parameters:
  //  - Wc
  WfsCmd(ctx context.Context, wc *WfsCmd) (_r *WfsAck, _err error)
}

type IWfsClient struct {
  c thrift.TClient
  meta thrift.ResponseMeta
}

func NewIWfsClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *IWfsClient {
  return &IWfsClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewIWfsClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *IWfsClient {
  return &IWfsClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewIWfsClient(c thrift.TClient) *IWfsClient {
  return &IWfsClient{
    c: c,
  }
}

func (p *IWfsClient) Client_() thrift.TClient {
  return p.c
}

func (p *IWfsClient) LastResponseMeta_() thrift.ResponseMeta {
  return p.meta
}

func (p *IWfsClient) SetLastResponseMeta_(meta thrift.ResponseMeta) {
  p.meta = meta
}

// 上传
// 
// Parameters:
//  - Wf
func (p *IWfsClient) WfsPost(ctx context.Context, wf *WfsFile) (_r *WfsAck, _err error) {
  var _args0 IWfsWfsPostArgs
  _args0.Wf = wf
  var _result2 IWfsWfsPostResult
  var _meta1 thrift.ResponseMeta
  _meta1, _err = p.Client_().Call(ctx, "wfsPost", &_args0, &_result2)
  p.SetLastResponseMeta_(_meta1)
  if _err != nil {
    return
  }
  if _ret3 := _result2.GetSuccess(); _ret3 != nil {
    return _ret3, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "wfsPost failed: unknown result")
}

// 拉取
// 
// Parameters:
//  - Name
func (p *IWfsClient) WfsRead(ctx context.Context, name string) (_r *WfsFile, _err error) {
  var _args4 IWfsWfsReadArgs
  _args4.Name = name
  var _result6 IWfsWfsReadResult
  var _meta5 thrift.ResponseMeta
  _meta5, _err = p.Client_().Call(ctx, "wfsRead", &_args4, &_result6)
  p.SetLastResponseMeta_(_meta5)
  if _err != nil {
    return
  }
  if _ret7 := _result6.GetSuccess(); _ret7 != nil {
    return _ret7, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "wfsRead failed: unknown result")
}

// 删除
// 
// Parameters:
//  - Name
func (p *IWfsClient) WfsDel(ctx context.Context, name string) (_r *WfsAck, _err error) {
  var _args8 IWfsWfsDelArgs
  _args8.Name = name
  var _result10 IWfsWfsDelResult
  var _meta9 thrift.ResponseMeta
  _meta9, _err = p.Client_().Call(ctx, "wfsDel", &_args8, &_result10)
  p.SetLastResponseMeta_(_meta9)
  if _err != nil {
    return
  }
  if _ret11 := _result10.GetSuccess(); _ret11 != nil {
    return _ret11, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "wfsDel failed: unknown result")
}

// 命令
// 
// Parameters:
//  - Wc
func (p *IWfsClient) WfsCmd(ctx context.Context, wc *WfsCmd) (_r *WfsAck, _err error) {
  var _args12 IWfsWfsCmdArgs
  _args12.Wc = wc
  var _result14 IWfsWfsCmdResult
  var _meta13 thrift.ResponseMeta
  _meta13, _err = p.Client_().Call(ctx, "wfsCmd", &_args12, &_result14)
  p.SetLastResponseMeta_(_meta13)
  if _err != nil {
    return
  }
  if _ret15 := _result14.GetSuccess(); _ret15 != nil {
    return _ret15, nil
  }
  return nil, thrift.NewTApplicationException(thrift.MISSING_RESULT, "wfsCmd failed: unknown result")
}

type IWfsProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler IWfs
}

func (p *IWfsProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *IWfsProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *IWfsProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewIWfsProcessor(handler IWfs) *IWfsProcessor {

  self16 := &IWfsProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self16.processorMap["wfsPost"] = &iWfsProcessorWfsPost{handler:handler}
  self16.processorMap["wfsRead"] = &iWfsProcessorWfsRead{handler:handler}
  self16.processorMap["wfsDel"] = &iWfsProcessorWfsDel{handler:handler}
  self16.processorMap["wfsCmd"] = &iWfsProcessorWfsCmd{handler:handler}
return self16
}

func (p *IWfsProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err2 := iprot.ReadMessageBegin(ctx)
  if err2 != nil { return false, thrift.WrapTException(err2) }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(ctx, thrift.STRUCT)
  iprot.ReadMessageEnd(ctx)
  x17 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(ctx, name, thrift.EXCEPTION, seqId)
  x17.Write(ctx, oprot)
  oprot.WriteMessageEnd(ctx)
  oprot.Flush(ctx)
  return false, x17

}

type iWfsProcessorWfsPost struct {
  handler IWfs
}

func (p *iWfsProcessorWfsPost) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err18 error
  args := IWfsWfsPostArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "wfsPost", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWfsWfsPostResult{}
  if retval, err2 := p.handler.WfsPost(ctx, args.Wf); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc19 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing wfsPost: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "wfsPost", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err18 = thrift.WrapTException(err2)
    }
    if err2 := _exc19.Write(ctx, oprot); _write_err18 == nil && err2 != nil {
      _write_err18 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err18 == nil && err2 != nil {
      _write_err18 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err18 == nil && err2 != nil {
      _write_err18 = thrift.WrapTException(err2)
    }
    if _write_err18 != nil {
      return false, thrift.WrapTException(_write_err18)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "wfsPost", thrift.REPLY, seqId); err2 != nil {
    _write_err18 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err18 == nil && err2 != nil {
    _write_err18 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err18 == nil && err2 != nil {
    _write_err18 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err18 == nil && err2 != nil {
    _write_err18 = thrift.WrapTException(err2)
  }
  if _write_err18 != nil {
    return false, thrift.WrapTException(_write_err18)
  }
  return true, err
}

type iWfsProcessorWfsRead struct {
  handler IWfs
}

func (p *iWfsProcessorWfsRead) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err20 error
  args := IWfsWfsReadArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "wfsRead", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWfsWfsReadResult{}
  if retval, err2 := p.handler.WfsRead(ctx, args.Name); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc21 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing wfsRead: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "wfsRead", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err20 = thrift.WrapTException(err2)
    }
    if err2 := _exc21.Write(ctx, oprot); _write_err20 == nil && err2 != nil {
      _write_err20 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err20 == nil && err2 != nil {
      _write_err20 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err20 == nil && err2 != nil {
      _write_err20 = thrift.WrapTException(err2)
    }
    if _write_err20 != nil {
      return false, thrift.WrapTException(_write_err20)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "wfsRead", thrift.REPLY, seqId); err2 != nil {
    _write_err20 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err20 == nil && err2 != nil {
    _write_err20 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err20 == nil && err2 != nil {
    _write_err20 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err20 == nil && err2 != nil {
    _write_err20 = thrift.WrapTException(err2)
  }
  if _write_err20 != nil {
    return false, thrift.WrapTException(_write_err20)
  }
  return true, err
}

type iWfsProcessorWfsDel struct {
  handler IWfs
}

func (p *iWfsProcessorWfsDel) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err22 error
  args := IWfsWfsDelArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "wfsDel", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWfsWfsDelResult{}
  if retval, err2 := p.handler.WfsDel(ctx, args.Name); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc23 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing wfsDel: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "wfsDel", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err22 = thrift.WrapTException(err2)
    }
    if err2 := _exc23.Write(ctx, oprot); _write_err22 == nil && err2 != nil {
      _write_err22 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err22 == nil && err2 != nil {
      _write_err22 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err22 == nil && err2 != nil {
      _write_err22 = thrift.WrapTException(err2)
    }
    if _write_err22 != nil {
      return false, thrift.WrapTException(_write_err22)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "wfsDel", thrift.REPLY, seqId); err2 != nil {
    _write_err22 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err22 == nil && err2 != nil {
    _write_err22 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err22 == nil && err2 != nil {
    _write_err22 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err22 == nil && err2 != nil {
    _write_err22 = thrift.WrapTException(err2)
  }
  if _write_err22 != nil {
    return false, thrift.WrapTException(_write_err22)
  }
  return true, err
}

type iWfsProcessorWfsCmd struct {
  handler IWfs
}

func (p *iWfsProcessorWfsCmd) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  var _write_err24 error
  args := IWfsWfsCmdArgs{}
  if err2 := args.Read(ctx, iprot); err2 != nil {
    iprot.ReadMessageEnd(ctx)
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err2.Error())
    oprot.WriteMessageBegin(ctx, "wfsCmd", thrift.EXCEPTION, seqId)
    x.Write(ctx, oprot)
    oprot.WriteMessageEnd(ctx)
    oprot.Flush(ctx)
    return false, thrift.WrapTException(err2)
  }
  iprot.ReadMessageEnd(ctx)

  tickerCancel := func() {}
  // Start a goroutine to do server side connectivity check.
  if thrift.ServerConnectivityCheckInterval > 0 {
    var cancel context.CancelFunc
    ctx, cancel = context.WithCancel(ctx)
    defer cancel()
    var tickerCtx context.Context
    tickerCtx, tickerCancel = context.WithCancel(context.Background())
    defer tickerCancel()
    go func(ctx context.Context, cancel context.CancelFunc) {
      ticker := time.NewTicker(thrift.ServerConnectivityCheckInterval)
      defer ticker.Stop()
      for {
        select {
        case <-ctx.Done():
          return
        case <-ticker.C:
          if !iprot.Transport().IsOpen() {
            cancel()
            return
          }
        }
      }
    }(tickerCtx, cancel)
  }

  result := IWfsWfsCmdResult{}
  if retval, err2 := p.handler.WfsCmd(ctx, args.Wc); err2 != nil {
    tickerCancel()
    err = thrift.WrapTException(err2)
    if errors.Is(err2, thrift.ErrAbandonRequest) {
      return false, thrift.WrapTException(err2)
    }
    _exc25 := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing wfsCmd: " + err2.Error())
    if err2 := oprot.WriteMessageBegin(ctx, "wfsCmd", thrift.EXCEPTION, seqId); err2 != nil {
      _write_err24 = thrift.WrapTException(err2)
    }
    if err2 := _exc25.Write(ctx, oprot); _write_err24 == nil && err2 != nil {
      _write_err24 = thrift.WrapTException(err2)
    }
    if err2 := oprot.WriteMessageEnd(ctx); _write_err24 == nil && err2 != nil {
      _write_err24 = thrift.WrapTException(err2)
    }
    if err2 := oprot.Flush(ctx); _write_err24 == nil && err2 != nil {
      _write_err24 = thrift.WrapTException(err2)
    }
    if _write_err24 != nil {
      return false, thrift.WrapTException(_write_err24)
    }
    return true, err
  } else {
    result.Success = retval
  }
  tickerCancel()
  if err2 := oprot.WriteMessageBegin(ctx, "wfsCmd", thrift.REPLY, seqId); err2 != nil {
    _write_err24 = thrift.WrapTException(err2)
  }
  if err2 := result.Write(ctx, oprot); _write_err24 == nil && err2 != nil {
    _write_err24 = thrift.WrapTException(err2)
  }
  if err2 := oprot.WriteMessageEnd(ctx); _write_err24 == nil && err2 != nil {
    _write_err24 = thrift.WrapTException(err2)
  }
  if err2 := oprot.Flush(ctx); _write_err24 == nil && err2 != nil {
    _write_err24 = thrift.WrapTException(err2)
  }
  if _write_err24 != nil {
    return false, thrift.WrapTException(_write_err24)
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Wf
type IWfsWfsPostArgs struct {
  Wf *WfsFile `thrift:"wf,1" db:"wf" json:"wf"`
}

func NewIWfsWfsPostArgs() *IWfsWfsPostArgs {
  return &IWfsWfsPostArgs{}
}

var IWfsWfsPostArgs_Wf_DEFAULT *WfsFile
func (p *IWfsWfsPostArgs) GetWf() *WfsFile {
  if !p.IsSetWf() {
    return IWfsWfsPostArgs_Wf_DEFAULT
  }
return p.Wf
}
func (p *IWfsWfsPostArgs) IsSetWf() bool {
  return p.Wf != nil
}

func (p *IWfsWfsPostArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWfsWfsPostArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Wf = &WfsFile{}
  if err := p.Wf.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Wf), err)
  }
  return nil
}

func (p *IWfsWfsPostArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "wfsPost_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWfsWfsPostArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "wf", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:wf: ", p), err) }
  if err := p.Wf.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Wf), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:wf: ", p), err) }
  return err
}

func (p *IWfsWfsPostArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWfsWfsPostArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IWfsWfsPostResult struct {
  Success *WfsAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIWfsWfsPostResult() *IWfsWfsPostResult {
  return &IWfsWfsPostResult{}
}

var IWfsWfsPostResult_Success_DEFAULT *WfsAck
func (p *IWfsWfsPostResult) GetSuccess() *WfsAck {
  if !p.IsSetSuccess() {
    return IWfsWfsPostResult_Success_DEFAULT
  }
return p.Success
}
func (p *IWfsWfsPostResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IWfsWfsPostResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWfsWfsPostResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &WfsAck{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IWfsWfsPostResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "wfsPost_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWfsWfsPostResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IWfsWfsPostResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWfsWfsPostResult(%+v)", *p)
}

// Attributes:
//  - Name
type IWfsWfsReadArgs struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewIWfsWfsReadArgs() *IWfsWfsReadArgs {
  return &IWfsWfsReadArgs{}
}


func (p *IWfsWfsReadArgs) GetName() string {
  return p.Name
}
func (p *IWfsWfsReadArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWfsWfsReadArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IWfsWfsReadArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "wfsRead_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWfsWfsReadArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *IWfsWfsReadArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWfsWfsReadArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IWfsWfsReadResult struct {
  Success *WfsFile `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIWfsWfsReadResult() *IWfsWfsReadResult {
  return &IWfsWfsReadResult{}
}

var IWfsWfsReadResult_Success_DEFAULT *WfsFile
func (p *IWfsWfsReadResult) GetSuccess() *WfsFile {
  if !p.IsSetSuccess() {
    return IWfsWfsReadResult_Success_DEFAULT
  }
return p.Success
}
func (p *IWfsWfsReadResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IWfsWfsReadResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWfsWfsReadResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &WfsFile{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IWfsWfsReadResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "wfsRead_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWfsWfsReadResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IWfsWfsReadResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWfsWfsReadResult(%+v)", *p)
}

// Attributes:
//  - Name
type IWfsWfsDelArgs struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
}

func NewIWfsWfsDelArgs() *IWfsWfsDelArgs {
  return &IWfsWfsDelArgs{}
}


func (p *IWfsWfsDelArgs) GetName() string {
  return p.Name
}
func (p *IWfsWfsDelArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWfsWfsDelArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *IWfsWfsDelArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "wfsDel_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWfsWfsDelArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *IWfsWfsDelArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWfsWfsDelArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IWfsWfsDelResult struct {
  Success *WfsAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIWfsWfsDelResult() *IWfsWfsDelResult {
  return &IWfsWfsDelResult{}
}

var IWfsWfsDelResult_Success_DEFAULT *WfsAck
func (p *IWfsWfsDelResult) GetSuccess() *WfsAck {
  if !p.IsSetSuccess() {
    return IWfsWfsDelResult_Success_DEFAULT
  }
return p.Success
}
func (p *IWfsWfsDelResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IWfsWfsDelResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWfsWfsDelResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &WfsAck{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IWfsWfsDelResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "wfsDel_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWfsWfsDelResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IWfsWfsDelResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWfsWfsDelResult(%+v)", *p)
}

// Attributes:
//  - Wc
type IWfsWfsCmdArgs struct {
  Wc *WfsCmd `thrift:"wc,1" db:"wc" json:"wc"`
}

func NewIWfsWfsCmdArgs() *IWfsWfsCmdArgs {
  return &IWfsWfsCmdArgs{}
}

var IWfsWfsCmdArgs_Wc_DEFAULT *WfsCmd
func (p *IWfsWfsCmdArgs) GetWc() *WfsCmd {
  if !p.IsSetWc() {
    return IWfsWfsCmdArgs_Wc_DEFAULT
  }
return p.Wc
}
func (p *IWfsWfsCmdArgs) IsSetWc() bool {
  return p.Wc != nil
}

func (p *IWfsWfsCmdArgs) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWfsWfsCmdArgs)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Wc = &WfsCmd{}
  if err := p.Wc.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Wc), err)
  }
  return nil
}

func (p *IWfsWfsCmdArgs) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "wfsCmd_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWfsWfsCmdArgs) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "wc", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:wc: ", p), err) }
  if err := p.Wc.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Wc), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:wc: ", p), err) }
  return err
}

func (p *IWfsWfsCmdArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWfsWfsCmdArgs(%+v)", *p)
}

// Attributes:
//  - Success
type IWfsWfsCmdResult struct {
  Success *WfsAck `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewIWfsWfsCmdResult() *IWfsWfsCmdResult {
  return &IWfsWfsCmdResult{}
}

var IWfsWfsCmdResult_Success_DEFAULT *WfsAck
func (p *IWfsWfsCmdResult) GetSuccess() *WfsAck {
  if !p.IsSetSuccess() {
    return IWfsWfsCmdResult_Success_DEFAULT
  }
return p.Success
}
func (p *IWfsWfsCmdResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *IWfsWfsCmdResult) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *IWfsWfsCmdResult)  ReadField0(ctx context.Context, iprot thrift.TProtocol) error {
  p.Success = &WfsAck{}
  if err := p.Success.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *IWfsWfsCmdResult) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "wfsCmd_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *IWfsWfsCmdResult) writeField0(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin(ctx, "success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *IWfsWfsCmdResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("IWfsWfsCmdResult(%+v)", *p)
}


